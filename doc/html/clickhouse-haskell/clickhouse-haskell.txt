-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Clickhouse client in Haskell
--   
--   Please see the README on GitHub at
--   <a>https://github.com/githubuser/clickhouse-haskell#readme</a>
@package clickhouse-haskell
@version 0.1.0.0

module ClickHouseDriver.Core.ClientProtocol
_HELLO :: Word
_QUERY :: Word
_DATA :: Word
_CANCEL :: Word
_PING :: Word
_TABLES_STATUS_REQUEST :: Word
_COMPRESSION_ENABLE :: Word
_COMPRESSION_DISABLE :: Word
_COMPRESSION_METHOD_LZ4 :: Word
_COMPRESSION_METHOD_LZ4HC :: Word
_COMPRESSION_METHOD_ZSTD :: Word
_COMPRESSION_METHOD_BYTE_LZ4 :: Integer
_COMPRESSION_METHOD_BYTE_ZSTD :: Integer
typeStr :: Vector ByteString
toString :: Int -> ByteString


-- | This module defines constants for internal use.
module ClickHouseDriver.Core.Defines
_DEFAULT_PORT :: [Char]
_DEFAULT_SECURE_PORT :: [Char]
_DBMS_MIN_REVISION_WITH_TEMPORARY_TABLES :: Word
_DBMS_MIN_REVISION_WITH_TOTAL_ROWS_IN_PROGRESS :: Word
_DBMS_MIN_REVISION_WITH_BLOCK_INFO :: Integer
_DBMS_MIN_REVISION_WITH_CLIENT_INFO :: Word
_DBMS_MIN_REVISION_WITH_SERVER_TIMEZONE :: Word
_DBMS_MIN_REVISION_WITH_QUOTA_KEY_IN_CLIENT_INFO :: Word
_DBMS_MIN_REVISION_WITH_SERVER_DISPLAY_NAME :: Word
_DBMS_MIN_REVISION_WITH_VERSION_PATCH :: Word
_DBMS_MIN_REVISION_WITH_SERVER_LOGS :: Word
_DBMS_MIN_REVISION_WITH_COLUMN_DEFAULTS_METADATA :: Word
_DBMS_MIN_REVISION_WITH_CLIENT_WRITE_INFO :: Word
_DBMS_MIN_REVISION_WITH_SETTINGS_SERIALIZED_AS_STRINGS :: Word
_DBMS_DEFAULT_CONNECT_TIMEOUT_SEC :: Integer
_DBMS_DEFAULT_TIMEOUT_SEC :: Integer
_DBMS_DEFAULT_SYNC_REQUEST_TIMEOUT_SEC :: Integer
_DEFAULT_COMPRESS_BLOCK_SIZE :: Integer
_DEFAULT_INSERT_BLOCK_SIZE :: Word
_DBMS_NAME :: ByteString
_CLIENT_NAME :: ByteString
_CLIENT_VERSION_MAJOR :: Word
_CLIENT_VERSION_MINOR :: Word
_CLIENT_VERSION_PATCH :: Word
_CLIENT_REVISION :: Word
_STRINGS_ENCODING :: ByteString
_DEFAULT_HTTP_PORT :: Int
_BUFFER_SIZE :: Int
_DEFAULT_HOST :: [Char]
_DEFAULT_PING_WAIT_TIME :: Int
_DEFAULT_USERNAME :: ByteString
_DEFAULT_HOST_NAME :: ByteString
_DEFAULT_PASSWORD :: ByteString
_DEFAULT_PORT_NAME :: ByteString
_DEFAULT_DATABASE :: ByteString
_DEFAULT_COMPRESSION_SETTING :: Bool


-- | Definition of types
module ClickHouseDriver.Core.HTTP.Types
type JSONResult = Either ByteString [HashMap Text Value]
type Cmd = String
type Haxl a = GenHaxl () a
data Format
CSV :: Format
JSON :: Format
TUPLE :: Format
data HttpConnection
HttpConnection :: !HttpParams -> !Manager -> HttpConnection

-- | basic parameters
[httpParams] :: HttpConnection -> !HttpParams

-- | http manager
[httpManager] :: HttpConnection -> !Manager
data HttpParams
HttpParams :: !String -> {-# UNPACK #-} !Int -> !String -> !String -> Maybe String -> HttpParams
[httpHost] :: HttpParams -> !String
[httpPort] :: HttpParams -> {-# UNPACK #-} !Int
[httpUsername] :: HttpParams -> !String
[httpPassword] :: HttpParams -> !String
[httpDatabase] :: HttpParams -> Maybe String
instance GHC.Classes.Eq ClickHouseDriver.Core.HTTP.Types.Format


-- | Connection pool for HTTP connection. User should import
--   ClickHouseDriver.Core.HTTP instead
module ClickHouseDriver.Core.HTTP.Connection
httpConnect :: String -> String -> Int -> String -> IO HttpConnection
httpConnectDb :: String -> String -> Int -> String -> Maybe String -> IO HttpConnection
defaultHttpConnection :: IO HttpConnection
data HttpConnection
HttpConnection :: !HttpParams -> !Manager -> HttpConnection

-- | basic parameters
[httpParams] :: HttpConnection -> !HttpParams

-- | http manager
[httpManager] :: HttpConnection -> !Manager
createHttpPool :: HttpParams -> Int -> NominalDiffTime -> Int -> IO (Pool HttpConnection)
instance Data.Default.Class.Default ClickHouseDriver.Core.HTTP.Types.HttpParams

module ClickHouseDriver.Core.QueryProcessingStage
_FETCH_COLUMNS :: Word
_WITH_MERGEABLE_STATE :: Word
_COMPLETE :: Word


-- | This module provides constants the
module ClickHouseDriver.Core.ServerProtocol
_HELLO :: Word
_DATA :: Word
_EXCEPTION :: Word
_PROGRESS :: Word
_PONG :: Word
_END_OF_STREAM :: Word
_PROFILE_INFO :: Word
_TOTAL :: Word
_EXTREMES :: Word
_TABLES_STATUS_RESPONSE :: Word
_LOG :: Word
_TABLE_COLUMNS :: Word
typeStr :: Vector ByteString
toString :: Int -> ByteString


-- | Tools to analyze protocol and deserialize data sent from server. This
--   module is for internal use only.
module ClickHouseDriver.IO.BufferedReader
readBinaryStrWithLength :: Int -> Reader ByteString
readVarInt' :: Buffer -> IO (Word, Buffer)

-- | read binary string from buffer. It first read the integer(n) in front
--   of the desired string, then it read n bytes to capture the whole
--   string.
readBinaryStr' :: Buffer -> IO (ByteString, Buffer)
readBinaryStr :: Reader ByteString
readVarInt :: Reader Word
readBinaryInt8 :: Reader Int8
readBinaryInt16 :: Reader Int16
readBinaryInt64 :: Reader Int64
readBinaryInt32 :: Reader Int32
readBinaryUInt8 :: Reader Word8
readBinaryUInt128 :: Reader Word128
readBinaryUInt64 :: Reader Word64
readBinaryUInt32 :: Reader Word32
readBinaryUInt16 :: Reader Word16
type Reader a = StateT Buffer IO a

-- | Buffer is for receiving data from TCP stream. Whenever all bytes are
--   read, it automatically refill from the stream.
data Buffer
Buffer :: !Int -> ByteString -> Maybe Socket -> Buffer
[bufSize] :: Buffer -> !Int
[bytesData] :: Buffer -> ByteString
[socket] :: Buffer -> Maybe Socket

-- | create buffer with size and socket.
createBuffer :: Int -> Socket -> IO Buffer

-- | refill buffer from stream
refill :: Buffer -> IO Buffer
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Types.Word
instance ClickHouseDriver.IO.BufferedReader.Readable Data.ByteString.Internal.ByteString
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Int.Int8
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Int.Int16
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Int.Int32
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Int.Int64
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Word.Word8
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Word.Word16
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Word.Word32
instance ClickHouseDriver.IO.BufferedReader.Readable GHC.Word.Word64

module ClickHouseDriver.Core.Error
readException :: Maybe String -> Reader ClickhouseException
data ClickhouseException
ServerException :: String -> !Integer -> Maybe ClickhouseException -> ClickhouseException
[message] :: ClickhouseException -> String
[code] :: ClickhouseException -> !Integer
[nested] :: ClickhouseException -> Maybe ClickhouseException
_UNEXPECTED_PACKET_FROM_SERVER :: Integer
_UNKNOWN_PACKET_FROM_SERVER :: Integer
instance GHC.Show.Show ClickHouseDriver.Core.Error.ClickhouseException


-- | Tools to serialize data sent server. This module is for internal use
--   only.
module ClickHouseDriver.IO.BufferedWriter
writeBinaryStr :: MonoidMap ByteString w => ByteString -> Writer w
writeBinaryFixedLengthStr :: MonoidMap ByteString w => Word -> ByteString -> Writer w
writeVarUInt :: MonoidMap ByteString w => Word -> Writer w
c_write_varint :: Word -> IO CString
writeBinaryInt8 :: MonoidMap ByteString w => Int8 -> Writer w
writeBinaryInt16 :: MonoidMap ByteString w => Int16 -> Writer w
writeBinaryInt32 :: MonoidMap ByteString w => Int32 -> Writer w
writeBinaryInt64 :: MonoidMap ByteString w => Int64 -> Writer w
writeBinaryUInt8 :: MonoidMap ByteString w => Word8 -> Writer w
writeBinaryUInt16 :: MonoidMap ByteString w => Word16 -> Writer w
writeBinaryUInt32 :: MonoidMap ByteString w => Word32 -> Writer w
writeBinaryUInt64 :: MonoidMap ByteString w => Word64 -> Writer w
writeBinaryUInt128 :: MonoidMap ByteString w => Word128 -> Writer w
writeIn :: MonoidMap m w => m -> Writer w
transform :: MonoidMap w m => w -> m

-- | The writer monad writes bytestring builders and combine them as a
--   monoid.
type Writer w = WriterT w IO ()
class (Monoid w, Monoid m) => MonoidMap w m
instance ClickHouseDriver.IO.BufferedWriter.MonoidMap Data.ByteString.Internal.ByteString Data.ByteString.Lazy.Internal.ByteString
instance ClickHouseDriver.IO.BufferedWriter.MonoidMap Data.ByteString.Lazy.Internal.ByteString Data.ByteString.Internal.ByteString
instance ClickHouseDriver.IO.BufferedWriter.MonoidMap Data.ByteString.Internal.ByteString Data.ByteString.Builder.Internal.Builder
instance ClickHouseDriver.IO.BufferedWriter.MonoidMap Data.ByteString.Lazy.Internal.ByteString Data.ByteString.Builder.Internal.Builder
instance ClickHouseDriver.IO.BufferedWriter.MonoidMap Data.ByteString.Builder.Internal.Builder Data.ByteString.Lazy.Internal.ByteString
instance ClickHouseDriver.IO.BufferedWriter.MonoidMap Data.ByteString.Builder.Internal.Builder Data.ByteString.Internal.ByteString
instance GHC.Base.Monoid w => ClickHouseDriver.IO.BufferedWriter.MonoidMap w w


-- | Implementation of data types for internal use Most users should import
--   <a>ClickHouseDriver.Core</a> instead.
module ClickHouseDriver.Core.Types
data ServerInfo
ServerInfo :: {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> !Word -> Maybe ByteString -> {-# UNPACK #-} !ByteString -> ServerInfo
[name] :: ServerInfo -> {-# UNPACK #-} !ByteString
[version_major] :: ServerInfo -> {-# UNPACK #-} !Word
[version_minor] :: ServerInfo -> {-# UNPACK #-} !Word
[version_patch] :: ServerInfo -> {-# UNPACK #-} !Word
[revision] :: ServerInfo -> !Word
[timezone] :: ServerInfo -> Maybe ByteString
[display_name] :: ServerInfo -> {-# UNPACK #-} !ByteString
data TCPConnection
TCPConnection :: {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !ByteString -> !Socket -> !SockAddr -> !Context -> {-# UNPACK #-} !Word -> TCPConnection

-- | host name, default = "localhost"
[tcpHost] :: TCPConnection -> {-# UNPACK #-} !ByteString

-- | port number, default = "8123"
[tcpPort] :: TCPConnection -> {-# UNPACK #-} !ByteString

-- | username, default = "default"
[tcpUsername] :: TCPConnection -> {-# UNPACK #-} !ByteString

-- | password, dafault = ""
[tcpPassword] :: TCPConnection -> {-# UNPACK #-} !ByteString

-- | socket for communication
[tcpSocket] :: TCPConnection -> !Socket
[tcpSockAdrr] :: TCPConnection -> !SockAddr

-- | server and client informations
[context] :: TCPConnection -> !Context

-- | should the data be compressed or not. Not applied yet.
[tcpCompression] :: TCPConnection -> {-# UNPACK #-} !Word
getServerInfo :: TCPConnection -> Maybe ServerInfo
getClientInfo :: TCPConnection -> Maybe ClientInfo
getClientSetting :: TCPConnection -> Maybe ClientSetting
data ClientInfo
ClientInfo :: {-# UNPACK #-} !ByteString -> Interface -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !ByteString -> {-# UNPACK #-} !ByteString -> QueryKind -> ClientInfo
[client_name] :: ClientInfo -> {-# UNPACK #-} !ByteString
[interface] :: ClientInfo -> Interface
[client_version_major] :: ClientInfo -> {-# UNPACK #-} !Word
[client_version_minor] :: ClientInfo -> {-# UNPACK #-} !Word
[client_version_patch] :: ClientInfo -> {-# UNPACK #-} !Word
[client_revision] :: ClientInfo -> {-# UNPACK #-} !Word
[initial_user] :: ClientInfo -> {-# UNPACK #-} !ByteString
[initial_query_id] :: ClientInfo -> {-# UNPACK #-} !ByteString
[initial_address] :: ClientInfo -> {-# UNPACK #-} !ByteString
[quota_key] :: ClientInfo -> {-# UNPACK #-} !ByteString
[query_kind] :: ClientInfo -> QueryKind
data ClientSetting
ClientSetting :: {-# UNPACK #-} !Word -> !Bool -> {-# UNPACK #-} !ByteString -> ClientSetting
[insert_block_size] :: ClientSetting -> {-# UNPACK #-} !Word
[strings_as_bytes] :: ClientSetting -> !Bool
[strings_encoding] :: ClientSetting -> {-# UNPACK #-} !ByteString
data Context
Context :: Maybe ClientInfo -> Maybe ServerInfo -> Maybe ClientSetting -> Context
[client_info] :: Context -> Maybe ClientInfo
[server_info] :: Context -> Maybe ServerInfo
[client_setting] :: Context -> Maybe ClientSetting
data Interface
TCP :: Interface
HTTP :: Interface
data QueryKind
NO_QUERY :: QueryKind
INITIAL_QUERY :: QueryKind
SECOND_QUERY :: QueryKind
getDefaultClientInfo :: ByteString -> ClientInfo
data Packet
Block :: !Block -> Packet
[queryData] :: Packet -> !Block
Progress :: !Progress -> Packet
[prog] :: Packet -> !Progress
StreamProfileInfo :: !BlockStreamProfileInfo -> Packet
[profile] :: Packet -> !BlockStreamProfileInfo
MultiString :: !(ByteString, ByteString) -> Packet
ErrorMessage :: !String -> Packet
Hello :: Packet
EndOfStream :: Packet
readProgress :: Word -> Reader Progress
readBlockStreamProfileInfo :: Reader BlockStreamProfileInfo
data QueryInfo
QueryInfo :: !BlockStreamProfileInfo -> !Progress -> {-# UNPACK #-} !Word -> QueryInfo
[profile_info] :: QueryInfo -> !BlockStreamProfileInfo
[progress] :: QueryInfo -> !Progress
[elapsed] :: QueryInfo -> {-# UNPACK #-} !Word
data Progress
Prog :: {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> Progress
[rows] :: Progress -> {-# UNPACK #-} !Word
[bytes] :: Progress -> {-# UNPACK #-} !Word
[total_rows] :: Progress -> {-# UNPACK #-} !Word
[written_rows] :: Progress -> {-# UNPACK #-} !Word
[written_bytes] :: Progress -> {-# UNPACK #-} !Word
data BlockStreamProfileInfo
ProfileInfo :: {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> {-# UNPACK #-} !Word -> !Bool -> {-# UNPACK #-} !Word -> !Bool -> BlockStreamProfileInfo
[number_rows] :: BlockStreamProfileInfo -> {-# UNPACK #-} !Word
[blocks] :: BlockStreamProfileInfo -> {-# UNPACK #-} !Word
[number_bytes] :: BlockStreamProfileInfo -> {-# UNPACK #-} !Word
[applied_limit] :: BlockStreamProfileInfo -> !Bool
[rows_before_limit] :: BlockStreamProfileInfo -> {-# UNPACK #-} !Word
[calculated_rows_before_limit] :: BlockStreamProfileInfo -> !Bool
storeElasped :: QueryInfo -> Word -> QueryInfo
storeProfile :: QueryInfo -> BlockStreamProfileInfo -> QueryInfo
storeProgress :: QueryInfo -> Progress -> QueryInfo
defaultProfile :: BlockStreamProfileInfo
defaultProgress :: Progress
defaultQueryInfo :: QueryInfo
data ClickhouseType
CKInt8 :: Int8 -> ClickhouseType
CKInt16 :: Int16 -> ClickhouseType
CKInt32 :: Int32 -> ClickhouseType
CKInt64 :: Int64 -> ClickhouseType
CKInt128 :: Int64 -> Int64 -> ClickhouseType
CKUInt8 :: Word8 -> ClickhouseType
CKUInt16 :: Word16 -> ClickhouseType
CKUInt32 :: Word32 -> ClickhouseType
CKUInt64 :: Word64 -> ClickhouseType
CKUInt128 :: Word64 -> Word64 -> ClickhouseType
CKString :: ByteString -> ClickhouseType
CKTuple :: Vector ClickhouseType -> ClickhouseType
CKArray :: Vector ClickhouseType -> ClickhouseType
CKDecimal :: Float -> ClickhouseType
CKDecimal32 :: Float -> ClickhouseType
CKDecimal64 :: Double -> ClickhouseType
CKDecimal128 :: Double -> ClickhouseType
CKIPv4 :: (Word8, Word8, Word8, Word8) -> ClickhouseType
CKIPv6 :: (Word16, Word16, Word16, Word16, Word16, Word16, Word16, Word16) -> ClickhouseType
CKDate :: !Integer -> !Int -> !Int -> ClickhouseType
[year] :: ClickhouseType -> !Integer
[month] :: ClickhouseType -> !Int
[day] :: ClickhouseType -> !Int
CKNull :: ClickhouseType
data BlockInfo
Info :: !Bool -> {-# UNPACK #-} !Int32 -> BlockInfo
[is_overflows] :: BlockInfo -> !Bool
[bucket_num] :: BlockInfo -> {-# UNPACK #-} !Int32
data Block
ColumnOrientedBlock :: Vector (ByteString, ByteString) -> Vector (Vector ClickhouseType) -> BlockInfo -> Block
[columns_with_type] :: Block -> Vector (ByteString, ByteString)
[cdata] :: Block -> Vector (Vector ClickhouseType)
[info] :: Block -> BlockInfo
data CKResult
CKResult :: Vector (Vector ClickhouseType) -> !QueryInfo -> CKResult
[query_result] :: CKResult -> Vector (Vector ClickhouseType)
[query_info] :: CKResult -> !QueryInfo
writeBlockInfo :: BlockInfo -> Writer Builder
data ConnParams
ConnParams :: !ByteString -> !ByteString -> !ByteString -> !ByteString -> !Bool -> !ByteString -> ConnParams
[username'] :: ConnParams -> !ByteString
[host'] :: ConnParams -> !ByteString
[port'] :: ConnParams -> !ByteString
[password'] :: ConnParams -> !ByteString
[compression'] :: ConnParams -> !Bool
[database'] :: ConnParams -> !ByteString
setClientInfo :: Maybe ClientInfo -> TCPConnection -> TCPConnection
setClientSetting :: Maybe ClientSetting -> TCPConnection -> TCPConnection
setServerInfo :: Maybe ServerInfo -> TCPConnection -> TCPConnection
instance GHC.Generics.Generic ClickHouseDriver.Core.Types.ConnParams
instance GHC.Show.Show ClickHouseDriver.Core.Types.ConnParams
instance GHC.Show.Show ClickHouseDriver.Core.Types.CKResult
instance GHC.Show.Show ClickHouseDriver.Core.Types.QueryInfo
instance GHC.Show.Show ClickHouseDriver.Core.Types.Packet
instance GHC.Show.Show ClickHouseDriver.Core.Types.BlockStreamProfileInfo
instance GHC.Show.Show ClickHouseDriver.Core.Types.Progress
instance GHC.Show.Show ClickHouseDriver.Core.Types.TCPConnection
instance GHC.Show.Show ClickHouseDriver.Core.Types.Context
instance GHC.Show.Show ClickHouseDriver.Core.Types.ClientInfo
instance GHC.Classes.Eq ClickHouseDriver.Core.Types.QueryKind
instance GHC.Show.Show ClickHouseDriver.Core.Types.QueryKind
instance GHC.Classes.Eq ClickHouseDriver.Core.Types.Interface
instance GHC.Show.Show ClickHouseDriver.Core.Types.Interface
instance GHC.Show.Show ClickHouseDriver.Core.Types.ClientSetting
instance GHC.Show.Show ClickHouseDriver.Core.Types.ServerInfo
instance GHC.Show.Show ClickHouseDriver.Core.Types.Block
instance GHC.Classes.Eq ClickHouseDriver.Core.Types.ClickhouseType
instance GHC.Show.Show ClickHouseDriver.Core.Types.ClickhouseType
instance GHC.Show.Show ClickHouseDriver.Core.Types.BlockInfo
instance Data.Default.Class.Default ClickHouseDriver.Core.Types.QueryInfo
instance Data.Default.Class.Default ClickHouseDriver.Core.Types.BlockStreamProfileInfo
instance Data.Default.Class.Default ClickHouseDriver.Core.Types.Progress


-- | This module contains the implementations of serialization and
--   deserialization of Clickhouse data types.
module ClickHouseDriver.Core.Column
data ClickhouseType
CKInt8 :: Int8 -> ClickhouseType
CKInt16 :: Int16 -> ClickhouseType
CKInt32 :: Int32 -> ClickhouseType
CKInt64 :: Int64 -> ClickhouseType
CKInt128 :: Int64 -> Int64 -> ClickhouseType
CKUInt8 :: Word8 -> ClickhouseType
CKUInt16 :: Word16 -> ClickhouseType
CKUInt32 :: Word32 -> ClickhouseType
CKUInt64 :: Word64 -> ClickhouseType
CKUInt128 :: Word64 -> Word64 -> ClickhouseType
CKString :: ByteString -> ClickhouseType
CKTuple :: Vector ClickhouseType -> ClickhouseType
CKArray :: Vector ClickhouseType -> ClickhouseType
CKDecimal :: Float -> ClickhouseType
CKDecimal32 :: Float -> ClickhouseType
CKDecimal64 :: Double -> ClickhouseType
CKDecimal128 :: Double -> ClickhouseType
CKIPv4 :: (Word8, Word8, Word8, Word8) -> ClickhouseType
CKIPv6 :: (Word16, Word16, Word16, Word16, Word16, Word16, Word16, Word16) -> ClickhouseType
CKDate :: !Integer -> !Int -> !Int -> ClickhouseType
[year] :: ClickhouseType -> !Integer
[month] :: ClickhouseType -> !Int
[day] :: ClickhouseType -> !Int
CKNull :: ClickhouseType
readColumn :: ServerInfo -> Int -> ByteString -> Reader (Vector ClickhouseType)
writeColumn :: Context -> ByteString -> ByteString -> Vector ClickhouseType -> Writer Builder
transpose :: Vector (Vector ClickhouseType) -> Vector (Vector ClickhouseType)

-- | print in format
putStrLn :: Vector (Vector ClickhouseType) -> IO ()


-- | Miscellaneous helper functions. User should not import it.
module ClickHouseDriver.Core.HTTP.Helpers

-- | Trim JSON data
extract :: ByteString -> JSONResult
genURL :: HttpConnection -> Cmd -> IO String

-- | serialize column type into sql string
toString :: [ClickhouseType] -> String


-- | This module provides implementation of user's API
module ClickHouseDriver.Core.HTTP.Client

-- | Default environment
setupEnv :: (MonadIO m, HttpEnvironment a) => a -> m (Env a w)

-- | rename runHaxl function.
runQuery :: MonadIO m => Env u w -> GenHaxl u w a -> m a

-- | Fetch data from ClickHouse client in the text format.
getByteString :: String -> GenHaxl u w ByteString

-- | Fetch data from ClickHouse client in the JSON format.
getJSON :: String -> GenHaxl u w JSONResult
getText :: String -> GenHaxl u w Text

-- | Fetch data from Clickhouse client with commands warped in a
--   Traversable monad.
getTextM :: (Monad m, Traversable m) => m String -> GenHaxl u w (m Text)

-- | Fetch data from Clickhouse client in the format of JSON
getJsonM :: (Monad m, Traversable m) => m String -> GenHaxl u w (m JSONResult)

-- | insert one row
insertOneRow :: HttpEnvironment a => String -> [ClickhouseType] -> Env a w -> IO (Either ByteString String)

-- | insert one or more rows
insertMany :: HttpEnvironment a => String -> [[ClickhouseType]] -> Env a w -> IO (Either ByteString String)
ping :: GenHaxl u w ByteString

-- | actual function used by user to perform fetching command
exec :: HttpEnvironment a => String -> Env a w -> IO (Either ByteString String)

-- | insert data from
insertFromFile :: HttpEnvironment a => String -> Format -> FilePath -> Env a w -> IO (Either ByteString String)
defaultHttpClient :: MonadIO m => m (Env HttpConnection w)
httpClient :: MonadIO m => String -> String -> m (Env HttpConnection w)
defaultHttpPool :: MonadIO m => Int -> NominalDiffTime -> Int -> m (Env (Pool HttpConnection) w)
instance GHC.Show.Show (ClickHouseDriver.Core.HTTP.Client.HttpClient a)
instance GHC.Classes.Eq (ClickHouseDriver.Core.HTTP.Client.HttpClient a)
instance ClickHouseDriver.Core.HTTP.Client.HttpEnvironment ClickHouseDriver.Core.HTTP.Types.HttpConnection
instance ClickHouseDriver.Core.HTTP.Client.HttpEnvironment (Data.Pool.Pool ClickHouseDriver.Core.HTTP.Types.HttpConnection)
instance Haxl.Core.ShowP.ShowP ClickHouseDriver.Core.HTTP.Client.HttpClient
instance Data.Hashable.Class.Hashable (ClickHouseDriver.Core.HTTP.Client.HttpClient a)
instance Haxl.Core.DataSource.DataSourceName ClickHouseDriver.Core.HTTP.Client.HttpClient
instance Haxl.Core.DataSource.DataSource u ClickHouseDriver.Core.HTTP.Client.HttpClient
instance Haxl.Core.StateStore.StateKey ClickHouseDriver.Core.HTTP.Client.HttpClient

module ClickHouseDriver.Core.HTTP
data HttpConnection
HttpConnection :: !HttpParams -> !Manager -> HttpConnection

-- | basic parameters
[httpParams] :: HttpConnection -> !HttpParams

-- | http manager
[httpManager] :: HttpConnection -> !Manager
data HttpParams
HttpParams :: !String -> {-# UNPACK #-} !Int -> !String -> !String -> Maybe String -> HttpParams
[httpHost] :: HttpParams -> !String
[httpPort] :: HttpParams -> {-# UNPACK #-} !Int
[httpUsername] :: HttpParams -> !String
[httpPassword] :: HttpParams -> !String
[httpDatabase] :: HttpParams -> Maybe String
data Format
CSV :: Format
JSON :: Format
TUPLE :: Format
type Haxl a = GenHaxl () a
type Cmd = String
type JSONResult = Either ByteString [HashMap Text Value]

-- | Fetch data from ClickHouse client in the text format.
getByteString :: String -> GenHaxl u w ByteString
getText :: String -> GenHaxl u w Text

-- | Fetch data from ClickHouse client in the JSON format.
getJSON :: String -> GenHaxl u w JSONResult

-- | Fetch data from Clickhouse client with commands warped in a
--   Traversable monad.
getTextM :: (Monad m, Traversable m) => m String -> GenHaxl u w (m Text)

-- | Fetch data from Clickhouse client in the format of JSON
getJsonM :: (Monad m, Traversable m) => m String -> GenHaxl u w (m JSONResult)

-- | actual function used by user to perform fetching command
exec :: HttpEnvironment a => String -> Env a w -> IO (Either ByteString String)

-- | insert one row
insertOneRow :: HttpEnvironment a => String -> [ClickhouseType] -> Env a w -> IO (Either ByteString String)

-- | insert one or more rows
insertMany :: HttpEnvironment a => String -> [[ClickhouseType]] -> Env a w -> IO (Either ByteString String)

-- | insert data from
insertFromFile :: HttpEnvironment a => String -> Format -> FilePath -> Env a w -> IO (Either ByteString String)
ping :: GenHaxl u w ByteString

-- | Default environment
setupEnv :: (MonadIO m, HttpEnvironment a) => a -> m (Env a w)
defaultHttpClient :: MonadIO m => m (Env HttpConnection w)
defaultHttpPool :: MonadIO m => Int -> NominalDiffTime -> Int -> m (Env (Pool HttpConnection) w)
httpClient :: MonadIO m => String -> String -> m (Env HttpConnection w)

-- | rename runHaxl function.
runQuery :: MonadIO m => Env u w -> GenHaxl u w a -> m a
data HttpConnection
HttpConnection :: !HttpParams -> !Manager -> HttpConnection

-- | basic parameters
[httpParams] :: HttpConnection -> !HttpParams

-- | http manager
[httpManager] :: HttpConnection -> !Manager
defaultHttpConnection :: IO HttpConnection
createHttpPool :: HttpParams -> Int -> NominalDiffTime -> Int -> IO (Pool HttpConnection)
httpConnect :: String -> String -> Int -> String -> IO HttpConnection
httpConnectDb :: String -> String -> Int -> String -> Maybe String -> IO HttpConnection


-- | This module provides functions for handling data streaming
--   communications. For internal use only.
module ClickHouseDriver.Core.Block
data BlockInfo
Info :: !Bool -> {-# UNPACK #-} !Int32 -> BlockInfo
[is_overflows] :: BlockInfo -> !Bool
[bucket_num] :: BlockInfo -> {-# UNPACK #-} !Int32

-- | write block informamtion to string builder
writeInfo :: BlockInfo -> Writer Builder

-- | read information from block information
readInfo :: BlockInfo -> Reader BlockInfo

-- | Read a stream of data into a block. Data are read into column type
readBlockInputStream :: ServerInfo -> Reader Block
data Block
ColumnOrientedBlock :: Vector (ByteString, ByteString) -> Vector (Vector ClickhouseType) -> BlockInfo -> Block
[columns_with_type] :: Block -> Vector (ByteString, ByteString)
[cdata] :: Block -> Vector (Vector ClickhouseType)
[info] :: Block -> BlockInfo
defaultBlockInfo :: BlockInfo

-- | write data from column type into string builder.
writeBlockOutputStream :: Context -> Block -> Writer Builder
defaultBlock :: Block


-- | This module contains the implementations of communication with
--   Clickhouse server. Most of functions are for internal use. User should
--   just use ClickHouseDriver.Core.
module ClickHouseDriver.Core.Connection

-- | connect to database through TCP port, used in Client module.
tcpConnect :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> Bool -> IO (Either String TCPConnection)
sendQuery :: TCPConnection -> ByteString -> Maybe ByteString -> IO ()

-- | Read data from stream.
receiveData :: ServerInfo -> Reader Block
sendData :: TCPConnection -> ByteString -> Maybe Block -> IO ()

-- | Transform received query data into Clickhouse type
receiveResult :: ServerInfo -> QueryInfo -> Reader (Either String CKResult)
closeConnection :: TCPConnection -> IO ()
processInsertQuery :: TCPConnection -> ByteString -> Maybe ByteString -> [[ClickhouseType]] -> IO ByteString

-- | internal implementation for ping test.
ping' :: Int -> TCPConnection -> IO (Maybe String)

-- | This module mainly focuses how to make connection | to clickhouse
--   database and protocols to send and receive data
versionTuple :: ServerInfo -> (Word, Word, Word)

-- | Cancel last query sent to server
sendCancel :: TCPConnection -> IO ()

module ClickHouseDriver.Core.Pool

-- | Create connection pool
createConnectionPool :: ConnParams -> Int -> NominalDiffTime -> Int -> IO (Pool TCPConnection)
instance Data.Default.Class.Default ClickHouseDriver.Core.Types.ConnParams


-- | This module provides implementations of user's APIs
module ClickHouseDriver.Core.Client

-- | query command
query :: Env () w -> String -> IO (Either String (Vector (Vector ClickhouseType)))

-- | query result contains query information.
queryWithInfo :: String -> Env () w -> IO (Either String CKResult)
deploySettings :: TCPConnection -> IO (Env () w)
insertMany :: Env () w -> String -> [[ClickhouseType]] -> IO ByteString
insertOneRow :: Env () w -> String -> [ClickhouseType] -> IO ByteString

-- | ping pong
ping :: Env () w -> IO ()
withQuery :: Env () w -> String -> (Either String (Vector (Vector ClickhouseType)) -> IO a) -> IO a

-- | fetch data only
fetch :: String -> GenHaxl u w (Either String (Vector (Vector ClickhouseType)))

-- | fetch data alone with query information
fetchWithInfo :: String -> GenHaxl u w (Either String CKResult)

-- | for general use e.g. creating table, | multiple queries, multiple
--   insertions.
execute :: Env u w -> GenHaxl u w a -> IO a
client :: Resource a => Either String a -> IO (Env () w)
defaultClient :: IO (Env () w)

-- | close connection
closeClient :: Env () w -> IO ()
defaultClientPool :: Int -> NominalDiffTime -> Int -> IO (Env () w)
createClient :: ConnParams -> IO (Env () w)
createClientPool :: ConnParams -> Int -> NominalDiffTime -> Int -> IO (Env () w)
instance GHC.Show.Show (ClickHouseDriver.Core.Client.Query a)
instance GHC.Classes.Eq (ClickHouseDriver.Core.Client.Query a)
instance ClickHouseDriver.Core.Client.Resource ClickHouseDriver.Core.Types.TCPConnection
instance ClickHouseDriver.Core.Client.Resource (Data.Pool.Pool ClickHouseDriver.Core.Types.TCPConnection)
instance Haxl.Core.ShowP.ShowP ClickHouseDriver.Core.Client.Query
instance Data.Hashable.Class.Hashable (ClickHouseDriver.Core.Client.Query a)
instance Haxl.Core.DataSource.DataSourceName ClickHouseDriver.Core.Client.Query
instance Haxl.Core.DataSource.DataSource u ClickHouseDriver.Core.Client.Query
instance Haxl.Core.StateStore.StateKey ClickHouseDriver.Core.Client.Query

module ClickHouseDriver.Core

-- | connect to database through TCP port, used in Client module.
tcpConnect :: ByteString -> ByteString -> ByteString -> ByteString -> ByteString -> Bool -> IO (Either String TCPConnection)

-- | Create connection pool
createConnectionPool :: ConnParams -> Int -> NominalDiffTime -> Int -> IO (Pool TCPConnection)
data ClickhouseType
CKInt8 :: Int8 -> ClickhouseType
CKInt16 :: Int16 -> ClickhouseType
CKInt32 :: Int32 -> ClickhouseType
CKInt64 :: Int64 -> ClickhouseType
CKInt128 :: Int64 -> Int64 -> ClickhouseType
CKUInt8 :: Word8 -> ClickhouseType
CKUInt16 :: Word16 -> ClickhouseType
CKUInt32 :: Word32 -> ClickhouseType
CKUInt64 :: Word64 -> ClickhouseType
CKUInt128 :: Word64 -> Word64 -> ClickhouseType
CKString :: ByteString -> ClickhouseType
CKTuple :: Vector ClickhouseType -> ClickhouseType
CKArray :: Vector ClickhouseType -> ClickhouseType
CKDecimal :: Float -> ClickhouseType
CKDecimal32 :: Float -> ClickhouseType
CKDecimal64 :: Double -> ClickhouseType
CKDecimal128 :: Double -> ClickhouseType
CKIPv4 :: (Word8, Word8, Word8, Word8) -> ClickhouseType
CKIPv6 :: (Word16, Word16, Word16, Word16, Word16, Word16, Word16, Word16) -> ClickhouseType
CKDate :: !Integer -> !Int -> !Int -> ClickhouseType
[year] :: ClickhouseType -> !Integer
[month] :: ClickhouseType -> !Int
[day] :: ClickhouseType -> !Int
CKNull :: ClickhouseType
